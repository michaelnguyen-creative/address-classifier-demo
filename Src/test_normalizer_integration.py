"""
Integration Tests for Layer 1 + Layer 2 Pipeline

Tests the complete address normalization pipeline combining:
- Layer 1: Text Normalizer (generic normalization)
- Layer 2: Admin Prefix Handler (Vietnamese-specific expansion)
"""

from normalizer_v2 import (
    AddressNormalizer,
    process_province,
    process_district,
    process_ward,
    process_full_address
)


# ========================================================================
# INTEGRATION TEST CASES
# ========================================================================

INTEGRATION_TESTS = {
    'province_level': {
        'description': 'Province-Level Address Processing',
        'cases': [
            ("TP.HCM", "ho chi minh", "Full abbreviation"),
            ("Th√†nh Ph·ªë H·ªì Ch√≠ Minh", "ho chi minh", "Full form with diacritics"),
            ("tp.hcm", "ho chi minh", "Lowercase abbreviation"),
            ("H√† N·ªôi", "ha noi", "Capital city"),
            ("ƒê√† N·∫µng", "da nang", "Central city"),
        ]
    },
    
    'district_level': {
        'description': 'District-Level Address Processing',
        'cases': [
            ("Qu·∫≠n 1", "1", "Numbered district"),
            ("Q.1", "1", "Abbreviated district"),
            ("Qu·∫≠n T√¢n B√¨nh", "tan binh", "Named district"),
            ("Huy·ªán C·ªß Chi", "cu chi", "Rural district"),
            ("Th·ªã X√£ Thu·∫≠n An", "thuan an", "Town"),
        ]
    },
    
    'ward_level': {
        'description': 'Ward-Level Address Processing',
        'cases': [
            ("Ph∆∞·ªùng B·∫øn Ngh√©", "ben nghe", "Named ward"),
            ("P.B·∫øn Ngh√©", "ben nghe", "Abbreviated ward"),
            ("Ph∆∞·ªùng 12", "12", "Numbered ward"),
            ("X√£ T√¢n Th√¥ng H·ªôi", "tan thong hoi", "Commune"),
        ]
    },
    
    'messy_input': {
        'description': 'Messy Real-World Input',
        'cases': [
            ("357/28,Ng-T- Thu·∫≠t,P1,Q3", None, "Missing spaces, hyphens"),
            ("TP.HCM‚Ñ¢", "ho chi minh", "With trademark symbol"),
            ("Qu·∫≠n    1", "1", "Extra spaces"),
            ("P.B·∫æN NGH√â!!!", "ben nghe", "Uppercase with punctuation"),
        ]
    },
}


FULL_ADDRESS_TESTS = [
    {
        'input': "TP.HCM, Qu·∫≠n 1, P.B·∫øn Ngh√©",
        'expected': {
            'city': 'ho chi minh',
            'district': '1',
            'ward': 'ben nghe'
        },
        'description': "Standard format"
    },
    {
        'input': "Th√†nh Ph·ªë H·ªì Ch√≠ Minh, Qu·∫≠n T√¢n B√¨nh, Ph∆∞·ªùng 12",
        'expected': {
            'city': 'ho chi minh',
            'district': 'tan binh',
            'ward': '12'
        },
        'description': "Full form with diacritics"
    },
    {
        'input': "H√† N·ªôi, Q.Ba ƒê√¨nh, P.Ng·ªçc H√†",
        'expected': {
            'city': 'ha noi',
            'district': 'ba dinh',
            'ward': 'ngoc ha'
        },
        'description': "Mixed abbreviations"
    },
]


# ========================================================================
# TEST RUNNER
# ========================================================================

def run_integration_tests():
    """
    Run all integration tests
    """
    print("="*70)
    print("LAYER 1 + LAYER 2: INTEGRATION TESTS")
    print("="*70)
    
    normalizer = AddressNormalizer(data_dir="../data")
    
    total_passed = 0
    total_failed = 0
    
    # Test each level
    for suite_name, suite_config in INTEGRATION_TESTS.items():
        print(f"\n‚úÖ {suite_config['description']}")
        print("-" * 70)
        
        level = suite_name.replace('_level', '').replace('_', ' ')
        if level == 'messy input':
            level = 'auto'
        
        for input_text, expected, description in suite_config['cases']:
            if expected is None:
                # Just test that it doesn't crash
                try:
                    result = normalizer.process(input_text, level=level)
                    print(f"‚úÖ '{input_text[:30]:30}' ‚Üí '{result[:30]:30}' | {description}")
                    total_passed += 1
                except Exception as e:
                    print(f"‚ùå '{input_text[:30]:30}' ‚Üí ERROR: {e} | {description}")
                    total_failed += 1
            else:
                result = normalizer.process(input_text, level=level)
                passed = (result == expected)
                
                if passed:
                    print(f"‚úÖ '{input_text[:30]:30}' ‚Üí '{result[:30]:30}' | {description}")
                    total_passed += 1
                else:
                    print(f"‚ùå '{input_text[:30]:30}' ‚Üí '{result[:30]:30}' | {description}")
                    print(f"   Expected: '{expected}'")
                    print(f"   Actual:   '{result}'")
                    total_failed += 1
    
    # Test full address processing
    print(f"\n‚úÖ Full Address Processing")
    print("-" * 70)
    
    for test in FULL_ADDRESS_TESTS:
        result = normalizer.process_address(test['input'])
        expected = test['expected']
        
        passed = (result['components'] == expected)
        
        if passed:
            print(f"‚úÖ {test['description']}")
            print(f"   Input:  {test['input']}")
            print(f"   Output: {result['components']}")
            total_passed += 1
        else:
            print(f"‚ùå {test['description']}")
            print(f"   Input:    {test['input']}")
            print(f"   Expected: {expected}")
            print(f"   Actual:   {result['components']}")
            total_failed += 1
    
    # Summary
    print("\n" + "="*70)
    print("INTEGRATION TEST SUMMARY")
    print("="*70)
    
    total_tests = total_passed + total_failed
    percentage = (total_passed / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nTotal: {total_passed}/{total_tests} passed ({percentage:.1f}%)")
    
    if total_failed > 0:
        print(f"‚ö†Ô∏è  {total_failed} test(s) failed")
    else:
        print("‚úÖ All tests passed!")
    
    print("="*70)
    
    return total_passed, total_failed


# ========================================================================
# DEMO EXAMPLES
# ========================================================================

def run_demo():
    """
    Interactive demo showing the pipeline in action
    """
    print("\n" + "="*70)
    print("INTEGRATION DEMO: Layer 1 + Layer 2 Pipeline")
    print("="*70)
    
    normalizer = AddressNormalizer(data_dir="../data")
    
    # Example 1: Step-by-step pipeline
    print("\nüìç Example 1: Step-by-step pipeline")
    print("-" * 70)
    
    raw = "TP.HCM, Qu·∫≠n 1, P.B·∫øn Ngh√©"
    print(f"Raw input:  {raw}")
    
    # Layer 1 only
    normalized = normalizer.normalize_only(raw)
    print(f"Layer 1:    {normalized}")
    
    # Layer 1 + Layer 2 (full address)
    result = normalizer.process_address(raw)
    print(f"Layer 2:    {result['components']}")
    
    # Example 2: Messy real-world input
    print("\nüìç Example 2: Messy real-world input")
    print("-" * 70)
    
    messy = "357/28,Ng-T- Thu·∫≠t,P.B·∫øn Ngh√©,Q.1,TP.HCM‚Ñ¢"
    print(f"Raw input:  {messy}")
    
    normalized = normalizer.normalize_only(messy)
    print(f"Layer 1:    {normalized}")
    
    # Example 3: Convenience functions
    print("\nüìç Example 3: Convenience functions")
    print("-" * 70)
    
    print(f"process_province('TP.HCM') ‚Üí '{process_province('TP.HCM', data_dir='../data')}'")
    print(f"process_district('Qu·∫≠n 1') ‚Üí '{process_district('Qu·∫≠n 1', data_dir='../data')}'")
    print(f"process_ward('P.B·∫øn Ngh√©') ‚Üí '{process_ward('P.B·∫øn Ngh√©', data_dir='../data')}'")


if __name__ == "__main__":
    # Run integration tests
    passed, failed = run_integration_tests()
    
    # Run demo if all tests passed
    if failed == 0:
        run_demo()
